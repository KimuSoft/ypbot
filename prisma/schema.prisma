datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id

  discordAccessToken    String
  discordRefreshToken   String
  discordTokenExpiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rules       Rule[]
  sharedRules Rule[] @relation("_sharedRule")

  admin Boolean @default(false)
}

model Channel {
  id      String @id
  guildId String
  rules   Rule[] @relation("_ruleOnChannel")
}

model Rule {
  id          String        @id @default(cuid()) // id
  name        String
  description String
  authorId    String
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  sharedUser  User[]        @relation("_sharedRule")
  elements    RuleElement[]
  // channelIds String[]
  channels    Channel[]     @relation("_ruleOnChannel")
  isOfficial  Boolean       @default(false)
  shareCodes  ShareCode[]
}

model RuleElement {
  id             String   @id @default(cuid())
  ruleId         String
  rule           Rule     @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  name           String
  ruleType       RuleType
  regex          String? // 고급 옵션을 키지 않으면 name과 동일하게 지정
  includedRuleId String?
  // includedRule Rule? @relation(fields: [includedRuleId], references: [id], onDelete: Cascade)
  isSeparation   Boolean  @default(false) // 자모 분리 옵션
}

model ShareCode {
  id String @id @default(cuid())

  rule   Rule   @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  ruleId String

  maxCounts Int
  count     Int
}

enum RuleType {
  Black // 해당 정규식에 해당하면 제재함
  White // 해당 정규식에 해당하지 않으면 제재함
  Include // 해당 규칙을 하위 규칙으로 둠
}
